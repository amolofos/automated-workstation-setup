---

# application_settings:
#   gsettings:
#     debian:
#       - user: dkafetzi
#         settings:
#           - { "schema": "org.gnome.shell", "key": "favorite-apps", "value": "['code.desktop']" }
- name: Setup application settings for Debian system  # noqa fqcn-builtins
  register: gsettings_out
  become: true
  become_user: "{{ gsettings.0.user }}"
  shell: |
    export DISPLAY=:0.0;
    existingSettings=`gsettings get {{ gsettings.1.schema }} {{ gsettings.1.key }}`;
    if [ "${existingSettings}" != "{{ gsettings.1.value }}" ]; then
      gsettings set {{ gsettings.1.schema }} {{ gsettings.1.key }} "{{ gsettings.1.value }}";
      echo 'Setting applied.';
    fi
  args:
    executable: /bin/bash
    warn: false
  loop: "{{ settings_application.gsettings.debian | default([]) | subelements('settings', skip_missing=True) }}"
  loop_control:
    loop_var: gsettings
  failed_when:
    - gsettings_out.module_stderr | default(gsettings_out.stderr) | length > 0
    - "'No such schema' not in gsettings_out.module_stderr | default(gsettings_out.stderr)"
    # Hack to workaround the dbus not running by default in docker.
    - "'Error spawning command line' in gsettings_out.module_stderr | default(gsettings_out.stderr) and not are_we_in_docker"
  changed_when:
    - gsettings_out.module_stderr | default(gsettings_out.stderr) | length == 0
    - "'Setting applied.' in gsettings_out.module_stdout | default(gsettings_out.stdout)"
  when:
    - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
