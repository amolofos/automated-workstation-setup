# -----------------------------------------------------------------------------
# We need to have a base so that we do not install ansible, sudo etc by default.
# We want the script to handle them.
FROM ubuntu:20.04 as base

ENV \
	LANG=C.UTF-8 \
	DEBIAN_FRONTEND=noninteractive \
	# Do not buffer log output \
	PYTHONUNBUFFERED=1

ENV \
	DOCKER_DIR="/opt/docker" \
	BASE_DIR="/opt/automated-workstation" \
	RUNTIME_DIR="/opt/automated-workstation/app" \
	USER_AUTOMATION="automation"

WORKDIR $RUNTIME_DIR

# Let's install some helpful tools.
RUN apt-get update -qq \
	&& apt-get install --yes --no-install-recommends \
		apt-transport-https \
		apt-utils \
		ca-certificates \
		cron \
		curl \
		dbus-x11 \
		dirmngr \
		less \
		libnotify-bin \
		locales \
		iputils-ping \
		net-tools \
		netcat \
		notify-osd \
		sudo \
		software-properties-common \
		vim \
	&& apt-get clean \
 	&& rm -rf /var/lib/apt/lists/*

# -----------------------------------------------------------------------------
FROM base as runtime

# Let's create a random user as it would be the case in real world.
RUN \
	groupadd -g 999 $USER_AUTOMATION \
	&& useradd -m -u 999 -s /bin/bash -g $USER_AUTOMATION -G sudo $USER_AUTOMATION \
	&& echo "$USER_AUTOMATION ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers \
	&& touch /home/$USER_AUTOMATION/.sudo_as_admin_successful

RUN chown -R $USER_AUTOMATION:$USER_AUTOMATION $BASE_DIR

USER $USER_AUTOMATION

LABEL stage RUNTIME

# -----------------------------------------------------------------------------
FROM base as test

ENV \
	BUILD_DIR="/home/builder/build" \
	VENV="/home/builder/.venv" \
	# Keeps Python from generating .pyc files in the container. \
	PYTHONDONTWRITEBYTECODE=1 \
	USER_BUILDER="builder"

RUN apt-get update -qq \
	&& apt-get install --yes --no-install-recommends \
		python3.9 \
		python3.9-venv \
	&& apt-get clean \
 	&& rm -rf /var/lib/apt/lists/*

RUN \
	groupadd -g 999 $USER_BUILDER \
	&& useradd -r -m -u 999 -g $USER_BUILDER $USER_BUILDER

USER $USER_BUILDER
WORKDIR $BUILD_DIR

RUN python3.9 -m venv $VENV
ENV PATH="$VENV/bin:$PATH"

RUN . $VENV/bin/activate \
	&& pip3.9 install --upgrade \
		ansible-lint \
		yamllint

COPY ./ansible ./ansible/
COPY ./.ansible-lint .ansible-lint
COPY ./.yamllint.yml .yamllint.yml

RUN . $VENV/bin/activate \
	&& ansible-lint

LABEL stage TEST

# -----------------------------------------------------------------------------
FROM runtime as production

COPY ./docker/*.sh $DOCKER_DIR/
COPY ./scripts ./scripts/
COPY ./ansible ./ansible/

USER root
RUN chown -R $USER_AUTOMATION:$USER_AUTOMATION $DOCKER_DIR \
	&& chown -R $USER_AUTOMATION:$USER_AUTOMATION $RUNTIME_DIR \
	&& chmod 755 $DOCKER_DIR/*.sh
USER $USER_AUTOMATION

ENTRYPOINT $DOCKER_DIR/docker-entrypoint.sh

LABEL stage PRODUCTION
